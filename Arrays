1.Largest element in the array
#include<bits/stdc++.h>
using namespace std;

void la(int a[], int n){
    int max=INT_MIN;
    for(int i=0; i<n; i++){
        if(max<a[i]){
            max=a[i];
        }
    }
    cout<<max;
}

int main(){
    int a[]={5,8,9,2,4,1,6};
    int n=sizeof(a)/sizeof(a[0]);
    la(a, n);
    
}
2. Check whether the array is sorted or not
#include<bits/stdc++.h>
using namespace std;

void se(int a[], int n){
    int flag=0;
    for(int i=0; i<n; i++){
        if(i==n-1){
            break;
        }
        if(a[i]>a[i+1]){
            flag=1;
            break;
        }
    }
    if(flag==1){
        cout<<"not sorted";
    }
    else{
        cout<<"sorted";
    }
}

int main(){
    int a[]={8,9,12,34,51,76};
    int n=sizeof(a)/sizeof(a[0]);
    se(a, n);
    
}
3.Remove duplicate elements
#include<bits/stdc++.h>
using namespace std;

int se(int a[], int n){
    int j=0;
    for(int i=1; i<n; i++){
        if(a[j]!=a[i]){
            j++;
            a[j]=a[i];
        }
    }
    return j;
}

int main(){
    int a[]={1,1,2,2,2,3,3,3,4,4,4,4};
    int n=sizeof(a)/sizeof(a[0]);
    int k=se(a, n);
    for(int i=0; i<=k; i++){
        cout<<a[i]<<" ";
    }
    
}
4.Left rotate array by n times
#include<bits/stdc++.h>
using namespace std;

void reverse(int a[], int i, int j){
    while(i<=j){
        int temp;
        temp=a[i];
        a[i]=a[j];
        a[j]=temp;
        i++; 
        j--;
    }
} 

void ro(int a[], int n, int k){
    
            reverse(a, 0, k-1);
            reverse(a, k, n-1);
            reverse(a, 0, n-1);
      
}

int main(){
    int a[]={1,3,4,5,7,8};
    int n=sizeof(a)/sizeof(a[0]);
    int k;
    cin>>k;
    ro(a, n, k);
    for(int i=0; i<n; i++){
        cout<<a[i];
    }
    
}
5.Move zeros to the end
#include<bits/stdc++.h>
using namespace std;

void le(int a[], int i, int n){
    int j=i;
    for(int k=i+1; k<n; k++){
        if(a[k]!=a[j]){
            int temp;
            temp=a[k];
            a[k]=a[j];
            a[j]=temp;
            j++;
        }
    }
}

int main(){
    int a[]={1,0,3,4,0,5,0,8};
    int n=sizeof(a)/sizeof(a[0]);
    int i;
    for(i=0; i<n; i++){
        if(a[i]==0){
            break;
        }
    }
    le(a, i, n);
    for(int i=0; i<n; i++){
        cout<<a[i];
    }
    
}
6.Linear search
#include<bits/stdc++.h>
using namespace std;

void le(int a[], int n, int k){
    int flag=0;
    int i;
    for(i=0; i<n; i++){
        if(a[i]==k){
            flag=1;
            break;
        }
    }
    if(flag==0){
        cout<<"element is not found";
    }
    else{
        cout<<"element is found at "<<i;
    }
}

int main(){
    int a[]={1,0,3,4,0,5,0,8};
    int n=sizeof(a)/sizeof(a[0]);
    int k;
    cin>>k;
    le(a, n, k);

}
7.Maximum consecutive ones
#include<bits/stdc++.h>
using namespace std;


int main(){
    int a[]={1, 1, 0, 1, 1, 1,0,1,1,1,1,1};
    int n=sizeof(a)/sizeof(a[0]);
    int max=INT_MIN;
    int count=1;
    for(int i=0; i<n; i++){
        if(a[i]==a[i+1]){
            count++;
        }
        else{
            if(count>=max){
                max=count;
            }
              count=1;
        }
    }
    cout<<max;
}
8.Find the number which repeat only one and other numbers twice
#include<bits/stdc++.h>
using namespace std;


int main(){
    int a[]={1,1,2,2,4,4,5};
    int n=sizeof(a)/sizeof(a[0]);
    int k=a[0];
    for(int i=1; i<n; i++){
        k=k^a[i];
    }
    cout<<k;
    
}
9.Union of two arrays
#include<bits/stdc++.h>
using namespace std;

void un(int a[], int b[], int i, int j, int n1, int n2){
	vector <int> v;
	while(i<n1 && j<n2){
		if(a[i]<b[j]){
			v.push_back(a[i]);
			i++;
		}
		else if(a[i]==b[j]){
			v.push_back(a[i]);
			i++;
			j++;
		}
	}

	while(i<n1){
		v.push_back(a[i]);
		i++;
	}

	while(j<n2){
		v.push_back(b[j]);
		j++;
	}

	for(auto x:v){
		cout<<x<<" ";
	}
}

int main(){
	int a[]={1,2,4,5,6};
	int b[]={2,4,5,7,8};
	int n1=sizeof(a)/sizeof(a[0]);
	int n2=sizeof(b)/sizeof(b[0]);

	int i=0;
	int j=0;

	un(a, b, i, j, n1, n2);
}
10.

