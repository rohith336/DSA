1.Create a stack using an array

#include <bits/stdc++.h>
using namespace std;


class Stack{
    int top;
    int *a;
    int size;
    
    public:
    Stack(){
        top=-1;
        size=1000;
        a= new int(size);
    }
    
    void push(int data){
        top++;
        a[top]=data;
    }
    
    int pop(){
        int temp=a[top];
        top--;
        return temp;
    }
    int Size(){
        return top+1;
    }
    int Top(){
        return a[top];
    }
};

int main()
{
    
    Stack s;
    s.push(5);
    s.push(7);
    s.push(1);
    
    cout<<"top:"<<s.Top()<<" ";
    cout<<"size:"<<s.Size()<<" ";
    cout<<"pop:"<<s.pop()<<" ";
    cout<<"top"<<s.Top()<<" ";
    cout<<"size"<<s.Size()<<" ";
    return 0;
}
2.Queue using arrays

#include <bits/stdc++.h>
using namespace std;


class Queue{
    int top;
    int rear;
    int *a;
    int maxSize;
    int currsize;
    
    public:
    Queue(int maxSize){
        this->maxSize=maxSize;
        top=-1;
        rear=-1;
        currsize=0;
        a= new int(maxSize);
    }
    
    void push(int data){
        if(currsize==maxSize){
            cout<<"Maximum size";
            exit(1);
        }
        if(rear==-1){
            top++;
            rear++;
        }
        else{
            rear++;
        }
        a[rear]=data;
        currsize++;
    }
    
    int pop(){
        if(top==-1){
            cout<<"it is empty";
            exit(1);
        }
        int temp=a[top];
        if(currsize==1){
            rear=-1;
            top=-1;
        }
        else{
            top++;
        }
        currsize--;
        return temp;
    }
    int Size(){
        return (rear-top)+1;
    }
    int Top(){
        if(top==-1){
            cout<<"Queue is empty";
            exit(1);
        }
        return a[rear];
    }
};

int main()
{
    
    Queue s(5);
    
   
    s.push(5);
    s.push(7);
    s.push(1);
    s.push(3);
    s.push(4);
    
    
    
    
    cout<<"top:"<<s.Top()<<" ";
    cout<<"size:"<<s.Size()<<" ";
    cout<<"pop:"<<s.pop()<<" ";
    cout<<"top"<<s.Top()<<" ";
    cout<<"size"<<s.Size()<<" ";
    return 0;
}
3.Implement stack using queue

#include <bits/stdc++.h>
using namespace std;


class Stack{
    
    queue<int> q;
    public:
    void push(int n){
        int s=q.size();
        q.push(n);
        for(int i=0; i<s; i++){
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop(){
        int t=q.front();
        q.pop();
        return t;
    }
    int Top(){
        
        return q.front();
    }
    int Size(){
        return q.size();
    }
    
};

int main()
{
    
    Stack s;
    
   
    s.push(5);
    s.push(7);
    s.push(1);
    s.push(3);
    s.push(4);
    
    
    cout<<"top:"<<s.Top()<<" ";
    cout<<"size:"<<s.Size()<<" ";
    cout<<"pop:"<<s.pop()<<" ";
    cout<<"top"<<s.Top()<<" ";
    cout<<"size"<<s.Size()<<" ";
    return 0;
}
4.Implement min stack
class MinStack {
public:
    stack<int> st;
    int min;
    MinStack() {
        
    }
    
    void push(int val) {
        if(st.empty()){
            min=val;
            st.push(val);
        }
        else{
            if(val>min){
                st.push(val);
            }
            else{
                long long int k=2*val-min;
                min=val;
                st.push(k);
            }
        }
    }
    
    void pop() {
        if(st.empty()){
            return;
        }
        else{
            int l=st.top();
            st.pop();
          if(l<min){
            min=2*min-l;
        }
        }
        
    }
    
    int top() {
        if(st.empty()){
            return -1; 
        }
        else{
            int u=st.top();
            if(u<min){
                return min;
            }
            else{
                return u;
            }
        }
    }
    
    int getMin() {
        return min;
    }
};
5.Next greater element 
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>
using namespace std;

void is(int a[], int n){
    vector<int> v;
    stack<int> s;
    
    for(int i=n-1; i>=0; i--){
        while(!s.empty() && s.top()<a[i]){
            s.pop();
        }
        if(s.empty()){
            v.push_back(-1);
        }
        else{
          v.push_back(s.top());  
        }
        
        s.push(a[i]);
    }
    
    reverse(v.begin(), v.end());
    
    for(auto x:v){
        cout<<x<<" ";
    }
}

int main()
{
    int a[]={1, 4, 3, 5, 9, 2};
    int n=6;
    is(a, n);

    return 0;
}
6.Next greater element ||
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        vector<int> v;
        stack <int> s;
        int n=nums.size();
        for(int i=(2*n)-1; i>=0; i--){
            while(!s.empty() && s.top()<=nums[i%n]){
                s.pop();
            }
            if(i<n){
                if(s.empty()){
                    v.push_back(-1);
                }
                else{
                    v.push_back(s.top());
                }
            }
            s.push(nums[i%n]);
        }
        reverse(v.begin(), v.end());
        return v;
    }
};
7.Next smaller element
#include <bits/stdc++.h>
using namespace std;

void is(int a[], int n){
    vector<int> v;
    stack<int> s;
    
    for(int i=0; i<n; i++){
        while(!s.empty() && s.top()>=a[i]){
            s.pop();
        }
        if(s.empty()){
            v.push_back(-1);
        }
        else{
            v.push_back(s.top());
        }
        s.push(a[i]);
    }
   
    for(auto x:v){
        cout<<x<<" ";
    }
}

int main()
{
    int a[]={1, 4, 3, 5, 9, 2};
    int n=6;
    is(a, n);

    return 0;
}
8.Trapping rain water
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>
using namespace std;

void is(vector<int> v){
     int l=0;
        int r=v.size()-1;
        int leftMax=0;
        int rightMax=0;
        int total=0;
        while(l<r){
            if(v[l]<=v[r]){
                 if(leftMax>v[l]){
                     total+=leftMax-v[l];
            }
                 else{
                     leftMax=v[l];
            }
               l++;
            }
            else{
                if(rightMax > v[r]){
                    total+=rightMax-v[r];
                }
                else{
                    rightMax=v[r];
                }
                r--;
            }
           
        }
         cout<<total;
}


int main()
{
    vector<int> v={0,1,0,2,1,0,1,3,2,1,2,1};
    is(v);
    
    return 0;
}
9.Ne
