1.Inorder Traversal:
class Solution {
public:

    void is(TreeNode* root, vector<int> &v){
        if(root==NULL){
            return;
        }
        is(root->left, v);
        v.push_back(root->val);
        is(root->right, v);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        is(root, v);
        return v;
    }
};
2.Pre-order Traversal
class Solution {
public:

    void is(TreeNode * root, vector<int> &v){
        if(root==NULL){
            return;
        }
        v.push_back(root->val);
        is(root->left, v);
        is(root->right, v);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        is(root, v);
        return v;
    }
};
3.Post-order Traversal
class Solution {
public:

    void is(TreeNode* root, vector<int> &v){
        if(root==NULL){
            return;
        }
        is(root->left, v);
        is(root->right, v);
        v.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        is(root, v);
        return v;
    }
};
4.Level order Traversal
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            vector<int> level;
            for(int i=0; i<size; i++){
                TreeNode *node=q.front();
                q.pop();
                if(node!=NULL){
                  if(node->left != NULL) q.push(node->left);
                  if(node->right != NULL) q.push(node->right);
                   level.push_back(node->val);
                }
            }
                if(!level.empty()){
                     ans.push_back(level);    
                }             
        } 
        return ans;
    }
};
5.Binary tree preorder traversal
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        
         stack<TreeNode* > q;
         vector<int> ans;
         if(root==NULL){
            return ans;
        }
         q.push(root);
         while(!q.empty()){
            TreeNode * temp=q.top();
            q.pop();
            if(temp!=NULL){
                if(temp->right) q.push(temp->right);
                if(temp->left) q.push(temp->left);
            }
            if(temp!=NULL){
                 ans.push_back(temp->val);   
            }
                
             }
             return ans;
    }
    
};
5.Binary tree in-order traversal
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode* > st;
        vector<int> ans;
        TreeNode* node=root;
        while(true){
           if(node!=NULL){
               st.push(node);
               node=node->left;
           }
           else{
               if(st.empty() == true) break;
               node = st.top();
               st.pop();
               ans.push_back(node->val);
               node=node->right;
           }
        }
        return ans;
    }
};
6.Iterative postorder 
class Solution{
    public:
    vector<int> postOrder(Node* node) {
        vector<int> ans;
        stack<Node*> st;
        Node * curr=node;
        while(curr!=NULL || !st.empty ()){
            if(curr!=NULL){
                st.push(curr);
                curr=curr->left;
            }
            else{
                Node *temp=st.top()->right;
                if(temp==NULL){
                    temp=st.top();
                    st.pop();
                    ans.push_back(temp->data);
                    while(!st.empty() && temp==st.top()->right){
                        temp=st.top();
                        st.pop();
                        ans.push_back(temp->data);
                    }
                }
                else{
                    curr=temp;
                }                    
            }
        }
        return ans;
    }
};
7.Maximum depth of a binary tree
class Solution {
public:
    int maxDepth(TreeNode* root) {
         if(root==NULL){
            return 0;
         }
         int ls=maxDepth(root->left);
         int rs=maxDepth(root->right);

         return 1+max(ls, rs);
    }
};
8.Balanced binary tree
class Solution {
public:

    int is(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        int lh, rh;
        if(root!=NULL){
               lh=is(root->left);
               rh=is(root->right);
        }
     
        if(lh==-1 || rh==-1) return -1;
        if(abs(lh-rh)>1) return -1;
        return max(lh, rh)+1;
    }

    bool isBalanced(TreeNode* root) {
        int l=is(root);
        if(l==-1){
            return false;
        }
        return true;
    }
};
9.N
